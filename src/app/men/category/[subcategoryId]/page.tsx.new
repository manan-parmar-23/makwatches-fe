"use client";
import React, { useEffect, useState } from "react";
import { fetchPublicProducts, ProductQueryParams } from "@/utils/api";
import ProductCard from "@/components/men/ProductCard";
import ProductCardMobile from "@/components/men/ProductCardMobile";

type LiteProduct = {
  id?: string;
  name?: string;
  price?: number;
  images?: string[];
};

export default function MenSubcategoryPage({
  params,
  searchParams,
}: {
  params: { subcategoryId: string };
  searchParams?: { name?: string };
}) {
  // For Next.js 14+ use React.use() to unwrap params (we use any to avoid TypeScript issues)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const resolvedParams = React.use(params as unknown as any) as {
    subcategoryId: string;
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const resolvedSearchParams = React.use(searchParams as unknown as any) as
    | { name?: string }
    | undefined;

  const subcategoryId = decodeURIComponent(resolvedParams.subcategoryId);
  const subcategoryName = resolvedSearchParams?.name
    ? decodeURIComponent(resolvedSearchParams.name)
    : undefined;

  const [items, setItems] = useState<LiteProduct[]>([]);
  const [filteredItems, setFilteredItems] = useState<LiteProduct[]>([]);
  const [loading, setLoading] = useState(true);
  const [isMobile, setIsMobile] = useState(false);
  const [filterOption, setFilterOption] = useState("");
  const [retryCount, setRetryCount] = useState(0); // Track retry attempts

  // Handle filter change
  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    setFilterOption(value);
    
    // Filtering happens in the useEffect below
  };

  // Apply filtering when items or filter option changes
  useEffect(() => {
    const sorted = [...items];
    
    if (filterOption === "price_low") {
      sorted.sort((a, b) => (a.price || 0) - (b.price || 0));
    } else if (filterOption === "price_high") {
      sorted.sort((a, b) => (b.price || 0) - (a.price || 0));
    }
    
    setFilteredItems(sorted);
  }, [items, filterOption]);

  // Handle mobile/desktop detection
  useEffect(() => {
    function handleResize() {
      setIsMobile(window.innerWidth < 768);
    }
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Fetch products with improved reliability
  useEffect(() => {
    let isMounted = true;
    
    const fetchProducts = async () => {
      setLoading(true);
      
      try {
        const queryParams: ProductQueryParams & {
          subcategory?: string;
          category?: string;
        } = {
          mainCategory: "Men",
          page: 1,
          limit: 30, // Get more items to ensure we have enough
        };
        
        // Set the subcategory - prefer name over ID for better matching
        if (subcategoryName) {
          queryParams.subcategory = subcategoryName;
        } else if (subcategoryId) {
          queryParams.subcategory = subcategoryId;
        }
        
        console.debug(`Fetching products (attempt ${retryCount + 1}):`, queryParams);
        
        const { data } = await fetchPublicProducts(queryParams);
        console.debug("API response:", data);
        
        const apiItems = Array.isArray(data.data) ? data.data : [];
        
        if (apiItems.length > 0) {
          // Convert API items to our local format
          const productList: LiteProduct[] = apiItems.map(p => ({
            id: p.id,
            name: p.name || "Unnamed Product",
            price: p.price,
            images: Array.isArray(p.images) ? p.images : []
          }));
          
          if (isMounted) {
            setItems(productList);
            setFilteredItems(productList);
            setLoading(false);
          }
        } else if (retryCount < 2) {
          // If no products found and we haven't retried too many times,
          // try with a delay and different parameter
          console.debug("No products found, retrying with different parameters...");
          
          if (isMounted) {
            setRetryCount(prev => prev + 1);
            // The retry will happen due to dependency change on retryCount
          }
        } else {
          // We've retried enough, show empty state
          if (isMounted) {
            setItems([]);
            setFilteredItems([]);
            setLoading(false);
          }
        }
      } catch (error) {
        console.error("Error fetching products:", error);
        if (isMounted) {
          setItems([]);
          setFilteredItems([]);
          setLoading(false);
        }
      }
    };
    
    fetchProducts();
    
    return () => {
      isMounted = false;
    };
  }, [subcategoryId, subcategoryName, retryCount]); // Add retryCount as dependency
  
  // Title derived from params
  const title = subcategoryName || subcategoryId || "Products";
  
  return (
    <main className="container px-2 md:py-2 max-w-7xl mx-auto">
      <h1 className="text-2xl md:text-3xl font-semibold text-[#531A1A] mb-6">
        {title}
      </h1>
      
      {/* Filter dropdown - only show if we have items */}
      {items.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-end">
            <div className="relative w-52">
              <select
                className="appearance-none w-full bg-white border border-gray-300 py-2 px-4 pr-8 rounded text-gray-700 cursor-pointer"
                defaultValue=""
                onChange={handleFilterChange}
              >
                <option value="" disabled>
                  Filter Products
                </option>
                <option value="newest">Newest First</option>
                <option value="price_low">Price: Low to High</option>
                <option value="price_high">Price: High to Low</option>
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg
                  className="fill-current h-4 w-4"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                >
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {loading ? (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
          {Array.from({ length: 8 }).map((_, i) => (
            <div
              key={i}
              className="h-[300px] md:h-[420px] bg-gray-100 rounded-xl animate-pulse"
            />
          ))}
        </div>
      ) : filteredItems.length === 0 ? (
        <div className="text-gray-600 text-center py-12">
          No products found in this category.
        </div>
      ) : (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
          {filteredItems.map((p, idx) => {
            const cardData = {
              id: undefined, // Set to undefined to match component's expected type
              name: p.name || "Product",
              price:
                typeof p.price === "number"
                  ? `${Math.round(p.price)}/-`
                  : "--/-",
              image:
                p.images && p.images.length > 0
                  ? p.images[0]
                  : "/placeholder.png",
              subcategory: null,
            };
            return isMobile ? (
              <ProductCardMobile key={p.id || idx} product={cardData} />
            ) : (
              <ProductCard key={p.id || idx} product={cardData} />
            );
          })}
        </div>
      )}
    </main>
  );
}
